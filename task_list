VAR_INT and VAR_UINT
 * build serialize_var_uint64 and deserialize_var_int64, with a layout similar to that of protobuf, to build VAR_INT and VAR_UINT on top of them in TupleIndexer, use get_min_bit_count_uintX/intX functionality to store only that many bits
 * also implement get_byte_count_for_serial_var_int64 and get_byte_count_for_serial_var_uint64, to get number of bytes in their serialized format

LARGE_UINT multiplication and division
 * make large_uint a templated macro like the value_arraylist, in large_uint macro, taking in only limb count and data structure name as input
  * convert all macros to functions with large_uint at the end
  * convert all functions to have large_uint concatenated at the end
  * implement the below macros
    * #define declarations_large_uint(large_uint, limbs_count) -> large_uint struct definiton and all method declarations
    * #define definitions_large_uint(large_uint, limbs_count) -> all large_uint method definitions
  * make uint128, uint256, uint384, and uint512 as available implementations of the large_uint