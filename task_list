VAR_INT and VAR_UINT
 * build serialize_var_uint64 and deserialize_var_int64, with a layout similar to that of protobuf, to build VAR_INT and VAR_UINT on top of them in TupleIndexer, use get_min_bit_count_uintX/intX functionality to store only that many bits
 * also implement get_byte_count_for_serial_var_int64 and get_byte_count_for_serial_var_uint64, to get number of bytes in their serialized format

LARGE_UINT multiplication and division
 * implement implement multiplication
   * implement 64-bit limb integral (2 operand) multiplication, returning 2 64-bit products (carry and result, both uint64_t)
   * implement multiplication between uint64_t limb and a large_uint, returning carry (64-bit limb) and result (a large_uint)
   * finally implement multicolication, by shifting numbers by a limb, returning 2 large_uints (carry an result)
 * implement division (returning quotient and remainder) function for large_uint
 * using the multiplication generate a large_uint_power_table, just like described in page_table_tuple_definitions of TupleIndexer
 * make large_uint a 256 bit integer